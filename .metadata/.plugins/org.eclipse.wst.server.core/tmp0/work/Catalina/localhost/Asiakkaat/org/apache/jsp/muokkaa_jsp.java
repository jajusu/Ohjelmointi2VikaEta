/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2021-05-06 18:17:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class muokkaa_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<script src=\"scripts/main.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/tyylit.css\">\r\n");
      out.write("<title>Muokkaa asiakasta</title>\r\n");
      out.write("<style>\r\n");
      out.write("body{\r\n");
      out.write("\tmax-width:300px\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body onkeydown=\"tutkiKey(event)\">\r\n");
      out.write("\r\n");
      out.write("<a href=\"listaa.jsp\">Takaisin</a><br><br>\r\n");
      out.write("\r\n");
      out.write("<form id=\"tiedot\">\r\n");
      out.write("\tEtunimi: <input type=\"text\" id=\"etunimi\" name=\"etunimi\"><br><br>\r\n");
      out.write("\tSukunimi: <input type=\"text\" id=\"sukunimi\"name=\"sukunimi\"><br><br>\r\n");
      out.write("    Puhelin: <input type=\"text\" id=\"puhelin\"name=\"puhelin\"><br><br>\r\n");
      out.write("\tSähköposti: <input type=\"text\" id=\"sposti\" name=\"sposti\"><br><br>\r\n");
      out.write("\t<input type=\"button\" id=\"tallenna\" value=\"Tallenna\" onclick=\"vieTiedot()\"><br>\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"asiakas_id\" id=\"asiakas_id\">\t\r\n");
      out.write("</form><br>\r\n");
      out.write("<span id=\"ilmo\"></span><br>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("function tutkiKey(event){\r\n");
      out.write("\tif(event.keyCode==13){//Enter\r\n");
      out.write("\t\tlisaaTiedot();\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("document.getElementById(\"etunimi\").focus();//viedään kursori etunimi-kenttään sivun latauksen yhteydessä\r\n");
      out.write("\r\n");
      out.write("//Haetaan muutettavan asiakkaan tiedot. Kutsutaan backin GET-metodia ja välitetään kutsun mukana muutettavan tiedon id\r\n");
      out.write("//GET /asiakkaat/muokkaa/id\r\n");
      out.write("var asiakas_id = requestURLParam(\"asiakas_id\"); //Funktio löytyy scripts/main.js \r\n");
      out.write("fetch(\"asiakkaat/muokkaa/\" + asiakas_id,{//Lähetetään kutsu backendiin\r\n");
      out.write("    method: 'GET'\t      \r\n");
      out.write("  })\r\n");
      out.write(".then( function (response) {//Odotetaan vastausta ja muutetaan JSON-vastausteksti objektiksi\r\n");
      out.write("\treturn response.json()\r\n");
      out.write("})\r\n");
      out.write(".then( function (responseJson) {//Otetaan vastaan objekti responseJson-parametrissä\t\r\n");
      out.write("\tconsole.log(responseJson);\r\n");
      out.write("\tdocument.getElementById(\"etunimi\").value = responseJson.etunimi;\t\t\r\n");
      out.write("\tdocument.getElementById(\"sukunimi\").value = responseJson.sukunimi;\t\r\n");
      out.write("\tdocument.getElementById(\"puhelin\").value = responseJson.puhelin;\t\r\n");
      out.write("\tdocument.getElementById(\"sposti\").value = responseJson.sposti;\t\r\n");
      out.write("\tdocument.getElementById(\"asiakas_id\").value = responseJson.asiakas_id;\t\r\n");
      out.write("});\t\r\n");
      out.write("\r\n");
      out.write("//Funktio tietojen muuttamista varten. Kutsutaan backin PUT-metodia ja välitetään kutsun mukana muutetut tiedot json-stringinä.\r\n");
      out.write("//PUT /asiakkaat/\r\n");
      out.write("function vieTiedot(){\t\r\n");
      out.write("\tvar ilmo=\"\";\r\n");
      out.write("\tvar d = new Date();\r\n");
      out.write("\tif(document.getElementById(\"etunimi\").value.length<3){\r\n");
      out.write("\t\tilmo=\"Etunimi ei kelpaa!\";\t\t\r\n");
      out.write("\t}else if(document.getElementById(\"sukunimi\").value.length<2){\r\n");
      out.write("\t\tilmo=\"Sukunimi ei kelpaa!\";\t\t\r\n");
      out.write("\t}else if(document.getElementById(\"puhelin\").value.length<1){\r\n");
      out.write("\t\tilmo=\"Puhelin ei kelpaa!\";\t\t\r\n");
      out.write("\t}else if(document.getElementById(\"sposti\").value.length<1){\r\n");
      out.write("\t\tilmo=\"Sähköposti ei kelpaa!\";\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\tif(ilmo!=\"\"){\r\n");
      out.write("\t\tdocument.getElementById(\"ilmo\").innerHTML=ilmo;\r\n");
      out.write("\t\tsetTimeout(function(){ document.getElementById(\"ilmo\").innerHTML=\"\"; }, 3000);\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tdocument.getElementById(\"etunimi\").value=siivoa(document.getElementById(\"etunimi\").value);\r\n");
      out.write("\tdocument.getElementById(\"sukunimi\").value=siivoa(document.getElementById(\"sukunimi\").value);\r\n");
      out.write("\tdocument.getElementById(\"puhelin\").value=siivoa(document.getElementById(\"puhelin\").value);\r\n");
      out.write("\tdocument.getElementById(\"sposti\").value=siivoa(document.getElementById(\"sposti\").value);\t\r\n");
      out.write("\t\r\n");
      out.write("\tvar formJsonStr=formDataToJSON(document.getElementById(\"tiedot\")); //muutetaan lomakkeen tiedot json-stringiksi\r\n");
      out.write("\tconsole.log(formJsonStr);\r\n");
      out.write("\t//Lähetään muutetut tiedot backendiin\r\n");
      out.write("\tfetch(\"asiakkaat\",{//Lähetetään kutsu backendiin\r\n");
      out.write("\t      method: 'PUT',\r\n");
      out.write("\t      body:formJsonStr\r\n");
      out.write("\t    })\r\n");
      out.write("\t.then( function (response) {//Odotetaan vastausta ja muutetaan JSON-vastaus objektiksi\r\n");
      out.write("\t\treturn response.json();\r\n");
      out.write("\t})\r\n");
      out.write("\t.then( function (responseJson) {//Otetaan vastaan objekti responseJson-parametrissä\t\r\n");
      out.write("\t\tvar vastaus = responseJson.response;\t\t\r\n");
      out.write("\t\tif(vastaus==0){\r\n");
      out.write("\t\t\tdocument.getElementById(\"ilmo\").innerHTML= \"Tietojen päivitys epäonnistui\";\r\n");
      out.write("      }else if(vastaus==1){\t        \t\r\n");
      out.write("      \tdocument.getElementById(\"ilmo\").innerHTML= \"Tietojen päivitys onnistui\";\t\t\t      \t\r\n");
      out.write("\t\t}\t\r\n");
      out.write("\t\tsetTimeout(function(){ document.getElementById(\"ilmo\").innerHTML=\"\"; }, 5000);\r\n");
      out.write("\t});\t\r\n");
      out.write("\tdocument.getElementById(\"tiedot\").reset(); //tyhjennetään tiedot -lomake\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//jostain syystä ei löydä scriptsistä main.js-fileä\r\n");
      out.write("\r\n");
      out.write("function requestURLParam(sParam){\r\n");
      out.write("    var sPageURL = window.location.search.substring(1);\r\n");
      out.write("    var sURLVariables = sPageURL.split(\"&\");\r\n");
      out.write("    for (var i = 0; i < sURLVariables.length; i++){\r\n");
      out.write("        var sParameterName = sURLVariables[i].split(\"=\");\r\n");
      out.write("        if(sParameterName[0] == sParam){\r\n");
      out.write("            return sParameterName[1];\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("function formDataToJSON(data){\r\n");
      out.write("\tvar returnStr=\"{\";\r\n");
      out.write("\tfor(var i=0; i<data.length; i++){\t\t\r\n");
      out.write("\t\treturnStr+=\"\\\"\" +data[i].name + \"\\\":\\\"\" + data[i].value + \"\\\",\";\r\n");
      out.write("\t}\t\r\n");
      out.write("\treturnStr = returnStr.substring(0, returnStr.length - 1); //poistetaan viimeinen pilkku\r\n");
      out.write("\treturnStr+=\"}\";\r\n");
      out.write("\treturn returnStr;\r\n");
      out.write("}\t\r\n");
      out.write("\r\n");
      out.write("function siivoa(teksti){\r\n");
      out.write("\tteksti=teksti.replace(\"<\",\"\");\r\n");
      out.write("\tteksti=teksti.replace(\";\",\"\");\r\n");
      out.write("\tteksti=teksti.replace(\"'\",\"''\");\r\n");
      out.write("\treturn teksti;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
