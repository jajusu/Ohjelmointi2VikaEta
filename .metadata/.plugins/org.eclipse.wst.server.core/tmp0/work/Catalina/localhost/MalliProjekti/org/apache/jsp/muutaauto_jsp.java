/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2021-05-06 09:46:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class muutaauto_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<script src=\"scripts/main.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\r\n");
      out.write("<title>Auton muutos</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body onkeydown=\"tutkiKey(event)\">\r\n");
      out.write("<form id=\"tiedot\">\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<thead>\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th colspan=\"3\" id=\"ilmo\"></th>\r\n");
      out.write("\t\t\t\t<th colspan=\"2\" class=\"oikealle\"><a href=\"listaaautot.jsp\" id=\"takaisin\">Takaisin listaukseen</a></th>\r\n");
      out.write("\t\t\t</tr>\t\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>RekNo</th>\r\n");
      out.write("\t\t\t\t<th>Merkki</th>\r\n");
      out.write("\t\t\t\t<th>Malli</th>\r\n");
      out.write("\t\t\t\t<th>Vuosi</th>\r\n");
      out.write("\t\t\t\t<th></th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"rekNo\" id=\"rekNo\"></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"merkki\" id=\"merkki\"></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"malli\" id=\"malli\"></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"vuosi\" id=\"vuosi\"></td> \r\n");
      out.write("\t\t\t\t<td><input type=\"button\" id=\"tallenna\" value=\"Hyväksy\" onclick=\"vieTiedot()\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<input type=\"hidden\" name=\"vanharekno\" id=\"vanharekno\">\t\r\n");
      out.write("</form>\r\n");
      out.write("<span id=\"ilmo\"></span>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("function tutkiKeyX(event){\r\n");
      out.write("\tif(event.keyCode==13){//Enter\r\n");
      out.write("\t\tvieTiedot();\r\n");
      out.write("\t}\t\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("var tutkiKey = (event) => {\r\n");
      out.write("\tif(event.keyCode==13){//Enter\r\n");
      out.write("\t\tvieTiedot();\r\n");
      out.write("\t}\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("document.getElementById(\"rekNo\").focus();//viedään kursori rekno-kenttään sivun latauksen yhteydessä\r\n");
      out.write("\r\n");
      out.write("//Haetaan muutettavan asiakkaan tiedot. Kutsutaan backin GET-metodia ja välitetään kutsun mukana muutettavan tiedon id\r\n");
      out.write("//GET /asiakkaat/haeyksi/id\r\n");
      out.write("var rekno = requestURLParam(\"rekno\"); //Funktio löytyy scripts/main.js \r\n");
      out.write("fetch(\"autot/haeyksi/\" + rekno,{//Lähetetään kutsu backendiin\r\n");
      out.write("      method: 'GET'\t      \r\n");
      out.write("    })\r\n");
      out.write(".then( function (response) {//Odotetaan vastausta ja muutetaan JSON-vastausteksti objektiksi\r\n");
      out.write("\treturn response.json()\r\n");
      out.write("})\r\n");
      out.write(".then( function (responseJson) {//Otetaan vastaan objekti responseJson-parametrissä\t\r\n");
      out.write("\tconsole.log(responseJson);\r\n");
      out.write("\tdocument.getElementById(\"rekNo\").value = responseJson.rekno;\t\t\r\n");
      out.write("\tdocument.getElementById(\"merkki\").value = responseJson.merkki;\t\r\n");
      out.write("\tdocument.getElementById(\"malli\").value = responseJson.malli;\t\r\n");
      out.write("\tdocument.getElementById(\"vuosi\").value = responseJson.vuosi;\t\r\n");
      out.write("\tdocument.getElementById(\"vanharekno\").value = responseJson.rekno;\t\r\n");
      out.write("});\t\r\n");
      out.write("\r\n");
      out.write("//Funktio tietojen muuttamista varten. Kutsutaan backin PUT-metodia ja välitetään kutsun mukana muutetut tiedot json-stringinä.\r\n");
      out.write("//PUT /autot/\r\n");
      out.write("function vieTiedot(){\t\r\n");
      out.write("\tvar ilmo=\"\";\r\n");
      out.write("\tvar d = new Date();\r\n");
      out.write("\tif(document.getElementById(\"rekNo\").value.length<3){\r\n");
      out.write("\t\tilmo=\"Rekisterinumero ei kelpaa!\";\t\t\r\n");
      out.write("\t}else if(document.getElementById(\"merkki\").value.length<2){\r\n");
      out.write("\t\tilmo=\"Merkki ei kelpaa!\";\t\t\r\n");
      out.write("\t}else if(document.getElementById(\"malli\").value.length<1){\r\n");
      out.write("\t\tilmo=\"Malli ei kelpaa!\";\t\t\r\n");
      out.write("\t}else if(document.getElementById(\"vuosi\").value*1!=document.getElementById(\"vuosi\").value){\r\n");
      out.write("\t\tilmo=\"Vuosi ei ole luku!\";\t\t\r\n");
      out.write("\t}else if(document.getElementById(\"vuosi\").value<1900 || document.getElementById(\"vuosi\").value>d.getFullYear()+1){\r\n");
      out.write("\t\tilmo=\"Vuosi ei kelpaa!\";\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\tif(ilmo!=\"\"){\r\n");
      out.write("\t\tdocument.getElementById(\"ilmo\").innerHTML=ilmo;\r\n");
      out.write("\t\tsetTimeout(function(){ document.getElementById(\"ilmo\").innerHTML=\"\"; }, 3000);\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tdocument.getElementById(\"rekNo\").value=siivoa(document.getElementById(\"rekNo\").value);\r\n");
      out.write("\tdocument.getElementById(\"merkki\").value=siivoa(document.getElementById(\"merkki\").value);\r\n");
      out.write("\tdocument.getElementById(\"malli\").value=siivoa(document.getElementById(\"malli\").value);\r\n");
      out.write("\tdocument.getElementById(\"vuosi\").value=siivoa(document.getElementById(\"vuosi\").value);\t\r\n");
      out.write("\t\r\n");
      out.write("\tvar formJsonStr=formDataToJSON(document.getElementById(\"tiedot\")); //muutetaan lomakkeen tiedot json-stringiksi\r\n");
      out.write("\tconsole.log(formJsonStr);\r\n");
      out.write("\t//Lähetään muutetut tiedot backendiin\r\n");
      out.write("\tfetch(\"autot\",{//Lähetetään kutsu backendiin\r\n");
      out.write("\t      method: 'PUT',\r\n");
      out.write("\t      body:formJsonStr\r\n");
      out.write("\t    })\r\n");
      out.write("\t.then( function (response) {//Odotetaan vastausta ja muutetaan JSON-vastaus objektiksi\r\n");
      out.write("\t\treturn response.json();\r\n");
      out.write("\t})\r\n");
      out.write("\t.then( function (responseJson) {//Otetaan vastaan objekti responseJson-parametrissä\t\r\n");
      out.write("\t\tvar vastaus = responseJson.response;\t\t\r\n");
      out.write("\t\tif(vastaus==0){\r\n");
      out.write("\t\t\tdocument.getElementById(\"ilmo\").innerHTML= \"Tietojen päivitys epäonnistui\";\r\n");
      out.write("        }else if(vastaus==1){\t        \t\r\n");
      out.write("        \tdocument.getElementById(\"ilmo\").innerHTML= \"Tietojen päivitys onnistui\";\t\t\t      \t\r\n");
      out.write("\t\t}\t\r\n");
      out.write("\t\tsetTimeout(function(){ document.getElementById(\"ilmo\").innerHTML=\"\"; }, 5000);\r\n");
      out.write("\t});\t\r\n");
      out.write("\tdocument.getElementById(\"tiedot\").reset(); //tyhjennetään tiedot -lomake\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
